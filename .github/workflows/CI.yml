name: CI

on:
  push:
    branches: [ '*' ] # Trigger the workflow on push to any branch
    paths:
      - 'server/notifications/**'
      - 'server/posts/**'
      - 'server/relationships/**'
      - 'server/search/**'
      - 'server/users/**' # Trigger only if changes are made in these paths

jobs:
  build:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4.2.1 # Checkout the repository
      - name: Setup docker-compose
        uses: KengoTODA/actions-setup-docker-compose@v1.0.9
        with:
          version: 2.29.7 # Setup a specific version of docker-compose
      - name: Pull Docker Images
        run: docker compose -f server/docker-compose.yml pull # Pull the Docker images
      - name: Build Docker Images
        run: docker compose -f server/docker-compose.yml build --no-cache --parallel # Build the Docker images without cache
      - name: Capture build errors
        if: failure()
        run: |
          echo "La compilación ha fallado. Verifica los logs anteriores para más detalles." # Capture and log build errors

  test:
    needs: build # Run tests after the build job
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4.2.1 # Checkout the repository
      - name: Start services
        run: |
          cd server
          docker compose up -d # Start the services using docker-compose
      - name: Run tests
        run: |
          case ${{ github.event_path }} in
            server/users/*)
              docker compose exec users /bin/sh -c "dotnet test" # Run .NET tests for users service
              ;;
            server/posts/* | server/notifications/*)
              docker compose exec posts /bin/sh -c "composer install --no-interaction --prefer-dist && phpunit" # Run PHP tests for posts and notifications services
              ;;
            server/relationships/*)
              docker compose exec relationships /bin/sh -c "pip install -r requirements.txt && pytest" # Run Python tests for relationships service
              ;;
            server/search/*)
              docker compose exec search /bin/sh -c "npm ci && npm test" # Run Node.js tests for search service
              ;;
          esac
      - name: Stop services
        if: always()
        run: |
          cd server
          docker compose down # Stop the services

  analyze: # Run linters
    needs: build # Run linters after the build job
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        service: [
          notifications, # Lint PHP code for notifications service
          posts, # Lint PHP code for posts service
          relationships, # Lint Python code for relationships service
          search, # Lint JavaScript code for search service
          users # Lint .NET code for users service
        ]
    steps:
      - uses: actions/checkout@v4.2.1 # Checkout the repository

      - name: Set up PHP
        if: ${{ matrix.service == 'posts' || matrix.service == 'notifications' }}
        uses: shivammathur/setup-php@2.31.1
        with:
          php-version: '8.3'  # Setup PHP 8.3
          tools: phpcs # Setup PHP CodeSniffer

      - name: Set up Python 3.13
        if: ${{ matrix.service == 'relationships' }}
        uses: actions/setup-python@v5.2.0
        with:
          python-version: '3.13' # Setup Python 3.13

      - name: Install Python dependencies
        if: ${{ matrix.service == 'relationships' }}
        run: pip install flake8 # Install Python dependencies

      - name: Set up Node.js
        if: ${{ matrix.service == 'search' }}
        uses: actions/setup-node@v4.0.4
        with:
          node-version: '22' # Setup Node.js 22

      - name: Install Node.js dependencies
        if: ${{ matrix.service == 'search' }}
        run: npm ci --include=dev # Install Node.js dependencies including dev dependencies

      - name: Set up .NET
        if: ${{ matrix.service == 'users' }}
        uses: actions/setup-dotnet@v4.0.1
        with:
          dotnet-version: '7.0' # Setup .NET 7.0

      - name: Run linters for notifications or posts service
        if: ${{ matrix.service == 'notifications' || matrix.service == 'posts' }}
        uses: wearerequired/lint-action@v2.3.0
        with:
          php_codesniffer: true # Run linters for the PHP code
          php_codesniffer_dir: . # Lint the PHP code in the current directory

      - name: Run linters for users service
        if: ${{ matrix.service == 'users' }}
        uses: wearerequired/lint-action@v2.3.0
        with:
          dotnet_format: true # Run linters for the .NET code
          dotnet_format_dir: . # Lint the .NET code in the current directory

      - name: Run linters for relationships service
        if: ${{ matrix.service == 'relationships' }}
        uses: wearerequired/lint-action@v2.3.0
        with:
          flake8: true # Run linters for the Python code
          flake8_dir: . # Lint the Python code in the current directory

      - name: Run linters for search service
        if: ${{ matrix.service == 'search' }}
        uses: wearerequired/lint-action@v2.3.0
        with:
          eslint: true # Run linters for the JavaScript code
          eslint_dir: . # Lint the JavaScript code in the current directory
